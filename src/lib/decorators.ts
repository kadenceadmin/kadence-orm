import "reflect-metadata";
import { KadenceDataSource } from "../types/source";
import { KadenceEntityRef, KadenceTable, LoggingLevel } from "../types/object";

export function Entity(options: { source: KadenceDataSource, tableName: string, uniqueIds: string[], loggingLevel?: LoggingLevel }) {
    return function (target: any) {
        const obj = new (target as any);

        if (!options.loggingLevel) options.loggingLevel = LoggingLevel.None;

        const newObject: KadenceTable = new KadenceTable(obj.constructor.name);
        newObject.source = options.source;
        newObject.tableName = options.tableName;

        if (global.dataObjects) {
            let hasObject = false;

            Object.keys(global.dataObjects).forEach((obj) => {
                if (obj == newObject.name) {
                    global.dataObjects[obj].source = newObject.source;
                    global.dataObjects[obj].tableName = newObject.tableName;
                    global.dataObjects[obj].uniqueIds = options.uniqueIds;
                    global.dataObjects[obj].loggingLevel = options.loggingLevel;

                    hasObject = true;
                }
            });

            if (!hasObject) global.dataObjects[newObject.name] = newObject;
        }
        else {
            const ref = new KadenceEntityRef();

            ref[newObject.name] = newObject;
            
            global.dataObjects = ref;
        }
    }
}

export function Attribute(options? : { fieldName?: string, type?: string }) {
    return function (target: any, key: any) {
        const attribute = {
            name: key,
            fieldName: options?.fieldName || key,
            objectType: Reflect.getMetadata("design:type", target, key).name.toLowerCase(),
            dataType: options?.type || Reflect.getMetadata("design:type", target, key).name.toLowerCase(),
            autoGenerated: options?.type == "uuid" ? true : false
        };

        if (global.dataObjects) {
            let hasObject = false;

            Object.keys(global.dataObjects).forEach((obj) => {
                if (obj == target.constructor.name) {
                    global.dataObjects[obj].attributes.push(attribute);

                    hasObject = true;
                }
            });

            if (!hasObject) {
                global.dataObjects[target.constructor.name] = new KadenceTable(target.constructor.name, [attribute]);
            }
        }
        else {
            const ref = new KadenceEntityRef();

            const newTable = new KadenceTable(target.constructor.name);
            newTable.attributes = [attribute];

            ref[target.constructor.name] = newTable;
            
            global.dataObjects = ref;
        }
    }
}

export function Relation(options : { class: any, sourceField: string, targetField: string }) {
    return function (target: any, key: any) {
        const obj = new (options.class as any);
        
       
        const newRelation = {
            fieldName: key,
            table: obj.constructor.name,
            class: options.class,
            sourceField: options.sourceField,
            targetField: options.targetField
        };

        if (global.dataObjects) {
            global.dataObjects[target.constructor.name].relations.push(newRelation);
        }
        else {
            const ref = new KadenceEntityRef();

            const newTable = new KadenceTable(target.constructor.name);
            newTable.relations = [newRelation];

            ref[target.constructor.name] = newTable;
            
            global.dataObjects = ref;
        }
    }
}